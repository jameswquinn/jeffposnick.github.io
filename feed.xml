<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>thirty-four</title>
    <description>thirty-four is crafted with love in Brooklyn, by Jeff Posnick.</description>
    <link>https://jeffy.info</link>
    <atom:link href="https://jeffy.info/feed.xml" rel="self" type="application/atom+xml"/>
    <pubDate>Wed, 02 Nov 2016 22:45:57 -0400</pubDate>
    <lastBuildDate>Wed, 02 Nov 2016 22:45:57 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Offline-first for Your Templated Site (Part One)</title>
        <description>&lt;p&gt;&lt;em&gt;This is the first part of a planned three-part series.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part two will cover different strategies for caching and serving templated sites.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part three will dive into a specific service worker implementation that can be
used to provide an offline-first experience for a Jekyll-based site.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Folks who can’t wait for part three are welcome to check out the
&lt;a href=&quot;https://jeffy.info&quot;&gt;https://jeffy.info&lt;/a&gt;
service worker &lt;a href=&quot;https://github.com/jeffposnick/jeffposnick.github.io/tree/work/src&quot;&gt;implementation&lt;/a&gt;
ahead of time.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;whats-offline-first&quot;&gt;What’s offline-first?&lt;/h1&gt;

&lt;p&gt;Let’s see if I can get away with just embedding a tweet:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;…&amp;quot;Offline first&amp;quot; is a serving strategy. Get as far as you can with local data before going to the network.&lt;br /&gt;&lt;br /&gt;(serve-)offline-(content-)first.&lt;/p&gt;&amp;mdash; Jake Archibald (@jaffathecake) &lt;a href=&quot;https://twitter.com/jaffathecake/status/788289680735436800&quot;&gt;October 18, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s offline-first.&lt;/p&gt;

&lt;h1 id=&quot;whats-a-templated-site&quot;&gt;What’s a templated site?&lt;/h1&gt;

&lt;p&gt;What I’m calling a &lt;em&gt;templated site&lt;/em&gt; is built using multiple templates, combined with the actual text, images and other resources that make up the site’s content, spread across multiple pages. The site’s URLs uniquely identify the content specific to a page. The templates provide a structural layout shared across the pages.&lt;/p&gt;

&lt;p&gt;This is all a convoluted way of describing what’s otherwise known as a “content site”, but that’s deliberate: I want to avoid all the baggage that comes along with the “content site” label, especially the implication of what it’s not—a “web app”. What I’m describing are considerations for a particular architectural equation: templates + content = your site. If you’ve got templates, and some source of content, and you mix them together (either ahead of time during a build process, or at runtime on a server), then you’ve got a templated site! If you want to also call it a web app, cool; if you want to call it a content site, or a blog, or a CMS-powered site, that’s totally cool too.&lt;/p&gt;

&lt;p&gt;Since it’s always fun to draw contrasts, if I did have to hold up something in opposition to a templated site, it would be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;single page application&lt;/a&gt;. There’s a meaningful difference between the way SPAs handle navigations (using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt;History API&lt;/a&gt; to rewrite URLs, and swapping content out of an “&lt;a href=&quot;https://developers.google.com/web/updates/2015/11/app-shell&quot;&gt;application shell&lt;/a&gt;” container), and how templated sites handle navigations (as actual &lt;em&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/browsers.html#navigate&quot;&gt;navigations&lt;/a&gt;&lt;/em&gt;, in which the current DOM torn down, and built up again based on the new HTML). SPAs fill an important role in the web’s ecosystem, and they are the right architecture to use for certain types of projects, but they’re different beasts than templated sites.&lt;/p&gt;

&lt;p&gt;In case it’s not clear from that preamble, what you’re reading now, assuming it’s being read on https://jeffy.info/, is part of a templated site. Blogs, newspapers, and whole host of sites driven drive by a backend &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_management_system&quot;&gt;content management system&lt;/a&gt; are traditionally deployed as templated sites. If you’re reading the syndicated copy of this on https://medium.com/, then I’m going to hazard a guess that the “templated site” label is also appropriate, but I’m not as familiar with how they implement things. &lt;code class=&quot;highlighter-rouge&quot;&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;anatomy-of-a-templated-site&quot;&gt;Anatomy of a templated site&lt;/h1&gt;

&lt;p&gt;All right: with what’s hopefully a non-controversial set of a definitions out of the way, let’s take a deeper dive into the different pieces that work together to produce a templated site. I’m going to focus on a specific framework, &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, which I’m familiar with and that I use on https://jeffy.info/. The general concepts, if not the specific formats used for all the pieces, should apply broadly to other frameworks.&lt;/p&gt;

&lt;h2 id=&quot;templates&quot;&gt;Templates!&lt;/h2&gt;

&lt;p&gt;Yes, templates. Templated sites have templates. Moving along…&lt;/p&gt;

&lt;p&gt;Well, okay, there’s more to explore here. Templates are usually small chunks of HTML that fill a certain structural role on a page—the header, the sidebar, the footer, etc. There’s also likely to be a template that defines the HTML structure for the main bit of a page—the content—and which contains an insertion point where the words are plunked in from the content management system (more on that soon). These various templates are laid out in a… &lt;a href=&quot;http://jekyll.tips/jekyll-casts/layouts/&quot;&gt;layout&lt;/a&gt;, which can be expressed as a template composed of those sub-templates.&lt;/p&gt;

&lt;p&gt;Unfortunately, I lack the visual skills of some of my &lt;a href=&quot;https://jakearchibald.com/2014/offline-cookbook/#on-install-as-a-dependency&quot;&gt;colleagues&lt;/a&gt;, but here’s a rough sketch of what we’re talking about, with the hypothetical smaller templates that work together to form a layout template for blog post:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-11-02/blog_layout.svg&quot; alt=&quot;Templates come together to form a blog post layout&quot; class=&quot;half-width&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The interesting bit here is that each of those smaller templates that be tweaked and modified individually, and sometimes (but not always) don’t have to coordinate with each other or with the parent layout. You can imagine a rebranding in which a product name is changed in &lt;code class=&quot;highlighter-rouge&quot;&gt;head.tmpl&lt;/code&gt;, or a copyright year is changed in &lt;code class=&quot;highlighter-rouge&quot;&gt;foot.tmpl&lt;/code&gt;, without that requiring a larger change to any of the other templates or layouts.&lt;/p&gt;

&lt;h2 id=&quot;content&quot;&gt;Content!&lt;/h2&gt;

&lt;p&gt;Next up, let’s assume that we have some content (like: this post) that we want to share with the world. That content might live in a database. It might live in individual files—Jekyll uses individual &lt;a href=&quot;https://jekyllrb.com/docs/posts/&quot;&gt;Markdown files&lt;/a&gt;. It might be accessed as JSON returned from a content management system’s API. The important bits are the idea that there’s a logical separation between the content for one page and the content for another, and the idea that content is independent from the overall page structure that’s used to display it.&lt;/p&gt;

&lt;p&gt;I don’t know how to make diagrams of abstract content interesting, but… here’s a depiction of content for you:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-11-02/content.svg&quot; alt=&quot;An abstract representation of content&quot; class=&quot;half-width&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-process-that-smushes-together-the-templates-and-the-contents-and-outputs-a-final-html-document&quot;&gt;The process that smushes together the templates and the contents and outputs a final HTML document!&lt;/h2&gt;

&lt;p&gt;We’ve got some templates that are stitched together to make a layout, and we’ve got some content. What’s left is smushing the layout and the content together to form a unique HTML document corresponding to each piece of source of content.&lt;/p&gt;

&lt;p&gt;The specifics of the smushing vary greatly depending on what framework you’re using. When you know that you have a potentially huge corpus of content (think: the entire archives of a newspaper), you might opt for a framework that smushes on demand, server-side, in response to a request from a client. When you’re dealing with a slightly slimmer corpus (https://jeffy.info/: four posts and counting!), or if you want to avoid running custom code on a server, it can make sense to use a framework that smushes everything ahead of time. The you can serve the final HTML using any run of the mill HTTP server. That’s what the Jekyll framework &lt;a href=&quot;https://jekyllrb.com/docs/usage/&quot;&gt;does&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s your requisite diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-11-02/smushening.svg&quot; alt=&quot;A layout + content = final pages&quot; class=&quot;half-width&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The complete HTML documents are then displayed by the browser, blissfully unawares of all the behind-the-scenes architecture that was needed to get to this point.&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 13:00:00 -0400</pubDate>
        <link>https://jeffy.info/2016/11/02/offline-first-for-your-templated-site-part-1.html</link>
        <guid isPermaLink="true">https://jeffy.info/2016/11/02/offline-first-for-your-templated-site-part-1.html</guid>
        
        <category>pwa</category>
        
        <category>offline</category>
        
        <category>service-worker</category>
        
        <category>jekyll</category>
        
        
      </item>
    
      <item>
        <title>create-react-pwa</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;If you’d like to turn the output of &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;progressive web app&lt;/a&gt; (PWA) with offline support, take a look at the &lt;a href=&quot;https://github.com/jeffposnick/create-react-pwa&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-pwa&lt;/code&gt;&lt;/a&gt; repo, and in particular, the &lt;a href=&quot;https://github.com/jeffposnick/create-react-pwa/compare/starting-point...pwa&quot;&gt;GitHub diff&lt;/a&gt; of the minimal changes required.&lt;/p&gt;

&lt;h1 id=&quot;create-react-app&quot;&gt;create-react-app…&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt;&lt;/a&gt; solves a problem that many folks (including I) have run into: how can you get started with a straightforward, client-rendered, single page React app and build process, without spending hours researching a list of (sometimes conflicting) dependencies to list in your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;? It’s a project that came out of Facebook’s React engineering a few months back, and has since gained some significant mindshare in the web developer community.&lt;/p&gt;

&lt;h1 id=&quot;and-its-limitations&quot;&gt;…and it’s limitations&lt;/h1&gt;

&lt;p&gt;In keeping with the fewer-depencies-are-better-dependencies philosophy behind &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt;, the maintainers &lt;a href=&quot;https://github.com/facebookincubator/create-react-app/issues/192&quot;&gt;appear to be vigilant&lt;/a&gt; in the fight against scope creep, and are keeping the project lean. That’s understandable, and it’s left up to end users to decide what additional functionality to layer on top of the project’s skeleton.&lt;/p&gt;

&lt;p&gt;By design, the core of the build process isn’t directly extensible. It’s kicked off by &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; and consists of&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
 &quot;build&quot;: &quot;react-scripts build&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But! The opportunity’s there to cleanly chain some additional commands after that initial &lt;code class=&quot;highlighter-rouge&quot;&gt;react-scripts build&lt;/code&gt;, while keeping the &lt;code class=&quot;highlighter-rouge&quot;&gt;react-scripts&lt;/code&gt; black box opaque, giving us the chance to modify the output of the original build process.&lt;/p&gt;

&lt;h1 id=&quot;an-opportunity-for-pwa-ification&quot;&gt;An Opportunity for PWA-ification&lt;/h1&gt;

&lt;p&gt;That gets to the heart of my investigation: what’s the easiest way to guide developers starting from a fresh &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; towards the end goal of deploying a &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;progressive web app&lt;/a&gt;? Specifically, what would it take to add in a &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-worker/&quot;&gt;service worker&lt;/a&gt; that provided performance benefits as well as a meaningful offline experience, as well as a &lt;a href=&quot;https://developers.google.com/web/updates/2014/11/Support-for-installable-web-apps-with-webapp-manifest-in-chrome-38-for-Android&quot;&gt;web app manifest&lt;/a&gt; that contained application metadata?&lt;/p&gt;

&lt;h2 id=&quot;adding-a-web-app-manifest&quot;&gt;Adding a Web App Manifest&lt;/h2&gt;

&lt;p&gt;This is just a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Manifest&quot;&gt;standard&lt;/a&gt; JSON file with fields containing metadata useful for controlling the “add to homescreen” experience (currently only on Android devices). While each developer needs to choose their metadata wisely, there’s nothing particularly challenging here from a technical perspective, and we just need to create the file and get it copied over to the &lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt; output directory as part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; process.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-service-worker&quot;&gt;Adding a Service Worker&lt;/h2&gt;

&lt;p&gt;To handle the service worker, I (not surprisingly) turned to the &lt;a href=&quot;https://github.com/GoogleChrome/sw-precache&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sw-precache&lt;/code&gt;&lt;/a&gt; project. When added to a build process, it generates a service worker JavaScript file that will automatically version and keep all local static files—HTML, JavaScript, CSS, images, etc.—up to date. Because &lt;em&gt;all&lt;/em&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; output is local static files (there’s no server-side rendering or remote API calls by default, for example), &lt;code class=&quot;highlighter-rouge&quot;&gt;sw-precache&lt;/code&gt; can handle everything we need with little configuration needed.&lt;/p&gt;

&lt;p&gt;While I’ve traditionally used &lt;code class=&quot;highlighter-rouge&quot;&gt;sw-precache&lt;/code&gt; as a JavaScript module inside of a &lt;a href=&quot;http://gulpjs.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; build&lt;/a&gt; process, it also sports a &lt;a href=&quot;https://github.com/GoogleChrome/sw-precache#command-line-interface&quot;&gt;command-line interface&lt;/a&gt;, and it’s simple to add in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sw-precache&lt;/code&gt; command to the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; script chain.&lt;/p&gt;

&lt;h2 id=&quot;the-user-experience&quot;&gt;The User Experience&lt;/h2&gt;

&lt;p&gt;Here’s what the deployed PWA looks like on Chrome for Android, going through the steps of accepting the Add to Homescreen banner, and then launching it without a network connection.&lt;/p&gt;

&lt;iframe width=&quot;271&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/nV8sKoVbD5Q?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;try-it-yourself&quot;&gt;Try it Yourself&lt;/h1&gt;

&lt;p&gt;The best way to visualize the changes to the build process, as well as the (small) modifications needed to the source code, is to view the &lt;a href=&quot;https://github.com/jeffposnick/create-react-pwa/compare/starting-point...pwa&quot;&gt;GitHub diff&lt;/a&gt; between the starting point and the “final” PWA.&lt;/p&gt;

&lt;p&gt;Take “final” with a grain of salt, because while you will end up with a build process that yields a progressive web app, there are many directions you might want to take the starter project, and some of those might entail a more complex service worker implementation. I’ve tried to cover &lt;a href=&quot;https://github.com/jeffposnick/create-react-pwa#what-additional-changes-might-be-needed&quot;&gt;some scenarios&lt;/a&gt; in the repo’s README, including &lt;a href=&quot;https://github.com/jeffposnick/create-react-pwa#ive-added-in-react-router-and-now-my-urls-dont-work-offline&quot;&gt;steps to take&lt;/a&gt; if you’re using &lt;code class=&quot;highlighter-rouge&quot;&gt;react-router&lt;/code&gt; and need arbitrary URLs to work offline, as well as how you can add in &lt;a href=&quot;https://github.com/jeffposnick/create-react-pwa#im-using-cross-origin-apis-or-resources-and-they-arent-working-while-offline&quot;&gt;runtime caching strategies&lt;/a&gt; for calls to third party APIs and resources.&lt;/p&gt;

&lt;h1 id=&quot;beyond-create-react-app&quot;&gt;Beyond create-react-app&lt;/h1&gt;

&lt;p&gt;If you’re looking for examples of PWAs build with React that go a bit beyond what  &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; offers—for instance, that take advantage of server-side rendering or are built on third-party APIs—there are a few examples I could recommend:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/sw-precache/tree/master/app-shell-demo&quot;&gt;iFixit PWA&lt;/a&gt; (&lt;a href=&quot;https://ifixit-pwa.appspot.com/&quot;&gt;live deployment&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/insin/react-hn&quot;&gt;Hacker News PWA&lt;/a&gt; (&lt;a href=&quot;https://react-hn.appspot.com/&quot;&gt;live deployment&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 20 Aug 2016 08:00:00 -0400</pubDate>
        <link>https://jeffy.info/2016/08/20/create-react-pwa.html</link>
        <guid isPermaLink="true">https://jeffy.info/2016/08/20/create-react-pwa.html</guid>
        
        <category>pwa</category>
        
        <category>sw</category>
        
        <category>service-worker</category>
        
        <category>react</category>
        
        
      </item>
    
      <item>
        <title>Hosting Setup</title>
        <description>&lt;h1 id=&quot;blogging-software&quot;&gt;Blogging Software&lt;/h1&gt;
&lt;p&gt;I decided to go with &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, which ships templates for blog posts, but makes it simple enough to put together standalone pages.&lt;/p&gt;

&lt;h1 id=&quot;web-hosting&quot;&gt;Web Hosting&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://help.github.com/categories/github-pages-basics/&quot;&gt;GitHub Pages&lt;/a&gt; is free, which is nice, and (obviously) has first-class support for version control.
GitHub Pages &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages/&quot;&gt;natively supports Jekyll&lt;/a&gt;, which means I just need to add the raw material to source control, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; content will be automatically generated.
If you don’t care about a custom domain then you can stop at this point—you can serve your site off of https://&lt;em&gt;youraccount&lt;/em&gt;.github.io. No effort required for HTTPS support!
&lt;a href=&quot;https://github.com/jeffposnick/jeffposnick.github.io&quot;&gt;jeffposnick.github.io&lt;/a&gt; is the GitHub repo with this site’s content, if you want to check out what’s going on under the hood.&lt;/p&gt;

&lt;h1 id=&quot;registering-the-domain&quot;&gt;Registering the Domain&lt;/h1&gt;
&lt;p&gt;I registered “jeffy.info” using &lt;a href=&quot;https://domains.google.com&quot;&gt;Google Domains&lt;/a&gt;.
Google Domains is in invite-only beta mode at the moment, but using an alternative domain registrar shouldn’t change the process much.
(I was surprised at how easy it was to get a &lt;code class=&quot;highlighter-rouge&quot;&gt;.info&lt;/code&gt; domain—for whatever reason, they don’t seem to be very popular. Check them out rather than settling for some obscure &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt;.)&lt;/p&gt;

&lt;h1 id=&quot;add-a-cname-file-to-github&quot;&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; file to GitHub&lt;/h1&gt;
&lt;p&gt;As per the &lt;a href=&quot;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&quot;&gt;instructions&lt;/a&gt;, I added a &lt;a href=&quot;https://github.com/jeffposnick/jeffposnick.github.io/blob/master/CNAME&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; file&lt;/a&gt; to the top-level of the repo and pushed to GitHub.&lt;/p&gt;

&lt;h1 id=&quot;cloudflare-setup&quot;&gt;CloudFlare Setup&lt;/h1&gt;
&lt;p&gt;This was my first time using CloudFlare, so I needed to set up a (free) account.
I told CloudFlare that I wanted it to take control over the “jeffy.info” domain, and I set up two &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; records for the bare (“apex”) domain “jeffy.info” to resolve to the &lt;a href=&quot;https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/&quot;&gt;two published IP addresses&lt;/a&gt; for GitHub’s servers.
I also set up a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record for “www” as an alias of “jeffposnick.github.io”, so that “www.jeffy.info” will resolve.
&lt;img src=&quot;/assets/images/cloudflare_dns_settings.png&quot; alt=&quot;CloudFlare settings screenshot&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;changing-the-google-domains-dns-settings&quot;&gt;Changing the Google Domains DNS Settings&lt;/h1&gt;
&lt;p&gt;In order for CloudFlare to start serving traffic for “jeffy.info”, I needed to change the authoritative DNS settings for the domain to point to CloudFlare’s severs.
This was straight forward with the Google Domains UI (refer to your registrar’s online help if you’re using something else):
&lt;img src=&quot;/assets/images/google_domains_custom_dns.png&quot; alt=&quot;Google Domains custom DNS settings&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;https-only-setup&quot;&gt;HTTPS-only Setup&lt;/h1&gt;
&lt;p&gt;CloudFlare auto-provisioned a certificate for “jeffy.info” withing a couple of minutes, which was awesome and as painless as promised.
Make sure you use the “Flexible SSL” option, which is required to work with a GitHub Pages backend server.
Using “Flexible SSL” means that the GitHub Pages ⇔ CloudFlare traffic isn’t encrypted, but the CloudFlare ⇔ user’s browser traffic is.
That’s sufficient for my goal of enabling web functionality that requires HTTPS to the end user’s browser, but it’s probably not a good idea if you’re concerned about traffic vulnerabilities in the GitHub Pages ⇔ CloudFlare hop.
I want to make sure that my blog is HTTPS-only, and &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/sections/200038236-Page-Rules&quot;&gt;CloudFlare’s page rules&lt;/a&gt; interface allowed me to set that up:
&lt;img src=&quot;/assets/images/cloudflare_page_rules.png&quot; alt=&quot;HTTPS-only via CloudFlare's page rules&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;optimizing-content&quot;&gt;Optimizing Content&lt;/h1&gt;
&lt;p&gt;Since CloudFlare is a full-fledged CDN, they offer a number of content optimization options. In general, I turned off most of the settings, but I did enable HTML + JS + CSS minification:
&lt;img src=&quot;/assets/images/cloudflare_auto_minify.png&quot; alt=&quot;CloudFlare's web optimization settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since I’m relying on GitHub Pages to do my Jekyll’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; build, it seemed easiest to just let CloudFlare handle the minification rather than trying to work out a scripted solution.&lt;/p&gt;

&lt;p&gt;CloudFlare offers image minification as well, but only as part of their paid offering. So I’m using &lt;a href=&quot;https://www.npmjs.org/package/gulp-imagemin&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-imagemin&lt;/code&gt;&lt;/a&gt; locally on all my images, and pointing to the minified versions in posts. Be sure to minify your images!&lt;/p&gt;

&lt;h1 id=&quot;future-tweaks&quot;&gt;Future Tweaks&lt;/h1&gt;
&lt;p&gt;I’m not particularly happy with the default Jekyll templates, and have already made a few changes.
I’m sure there will be lots of twiddling with that to come.
I’m also not particularly familiar with the best practices for a build workflow. I’ve got a basic &lt;a href=&quot;https://github.com/jeffposnick/jeffposnick.github.io/blob/master/gulpfile.js&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;&lt;/a&gt; that I’m sure will grow over time.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Nov 2014 08:34:34 -0500</pubDate>
        <link>https://jeffy.info/2014/11/28/hosting-setup.html</link>
        <guid isPermaLink="true">https://jeffy.info/2014/11/28/hosting-setup.html</guid>
        
        <category>meta</category>
        
        <category>https</category>
        
        <category>cloudflare</category>
        
        <category>gh-pages</category>
        
        <category>github</category>
        
        <category>hosting</category>
        
        
      </item>
    
      <item>
        <title>thirty-four on the Web (Again)</title>
        <description>&lt;h1 id=&quot;about-me&quot;&gt;About Me&lt;/h1&gt;
&lt;p&gt;I’m &lt;a href=&quot;https://twitter.com/jeffposnick&quot;&gt;Jeff Posnick&lt;/a&gt;.
I’ve been working on the &lt;a href=&quot;https://developers.google.com/careers/&quot;&gt;Developer Relations&lt;/a&gt; team at Google NYC since 2007, first on the &lt;a href=&quot;https://developers.google.com/adwords/api/&quot;&gt;Ads APIs&lt;/a&gt;, then &lt;a href=&quot;https://developers.google.com/youtube/&quot;&gt;YouTube&lt;/a&gt;, and currently on the &lt;a href=&quot;http://www.webplatform.org/&quot;&gt;Open Web Platform&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;about-this-blog&quot;&gt;About this Blog&lt;/h1&gt;
&lt;p&gt;I’ve been blogging &lt;a href=&quot;http://thirtyfour.blogspot.com/&quot;&gt;elsewhere&lt;/a&gt; since 2003.
The other 34 started out using &lt;a href=&quot;http://en.wikipedia.org/wiki/Blosxom&quot;&gt;Blosxom&lt;/a&gt; on a self-hosted web server.
I moved it over to Blogger eventually.&lt;/p&gt;

&lt;p&gt;I’m going to keep &lt;a href=&quot;http://thirtyfour.blogspot.com/&quot;&gt;34&lt;/a&gt; around for personal topics.
This blog, &lt;a href=&quot;https://jeffy.info/&quot;&gt;thirty-four&lt;/a&gt;, is going to focus on web technologies.
Serving it via HTTPS, and having full control over the HTML/JavaScript/CSS, means that I’ll be able to take advantage of some of the new features being added to the web platform, like those powered by &lt;a href=&quot;https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html&quot;&gt;service workers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned for a post detailing this blog’s setup (spoiler alert: it’s a &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; site hosted on &lt;a href=&quot;https://help.github.com/categories/github-pages-basics/&quot;&gt;GitHub pages&lt;/a&gt;, with the &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare CDN&lt;/a&gt; providing &lt;a href=&quot;http://blog.cloudflare.com/easiest-ssl-ever-now-included-automatically-w/&quot;&gt;HTTPS support&lt;/a&gt;.)&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Nov 2014 05:34:34 -0500</pubDate>
        <link>https://jeffy.info/2014/11/28/thirty-four-on-the-web-again.html</link>
        <guid isPermaLink="true">https://jeffy.info/2014/11/28/thirty-four-on-the-web-again.html</guid>
        
        <category>meta</category>
        
        
      </item>
    
  </channel>
</rss>
